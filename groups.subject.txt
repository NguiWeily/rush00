Take the first letter of the login of your team leader, convert it to a number following this rule:
A = 1
B = 2
C = 3
D = 4
...

then your subject is the number you got modulo 5, so :
1 % 5 = 1 (your subject is 1)
2 % 5 = 2 (your subject is 2)
3 % 5 = 3 (your subject is 3)
4 % 5 = 4 (your subject is 4)
5 % 5 = 0 (your subject is 0)
6 % 5 = 1 (your subject is 1)
...
Turn-in directory : ex00/
Files to turn in : main.c, ft_putchar.c, rush00.c
Allowed functions : write
• Files to submit: main.c, ft_putchar.c and your rush00.c, ’00’ represents the
rush number. For example rush00.c.
• Those three files will be compiled together.
• Your file ft_putchar.c should include the function ft_putchar.
• Example of main.c:
int main()
{
rush(5, 5);
return (0);
}
• You must therefore write the function rush taking two variables of type int as
arguments, named respectively x and y. No need to say this function should be on
the rush00.c file.
• Your function rush should display (on-screen) a rectangle of x characters for width,
and y characters for length.
• Your function should never crash or loop indefinitely.
• Your main will be modified during defense, to check if you’ve handled everything
you’re supposed to. Here’s an example of test we’ll perform:
int main()
{
rush(123, 42);
return (0);
}
rush(5,3) should display:
$>./a.out
o---o
| |
o---o
$>
• rush(5, 1) should display:
$>./a.out
o---o
$>
• rush(1, 1) should display:
$>./a.out
o
$>
• rush(1, 5) should display:
$>./a.out
o
|
|
|
o
$>
rush(4, 4) should display:
$>./a.out
o--o
| |
| |
o--o
$>
Based on the instructions given, here's an example implementation of the `main.c`, `ft_putchar.c`, and `rush00.c` files for the Rush00 exercise:

**main.c**
```c
int main()
{
    rush(5, 5);
    return 0;
}
```

**ft_putchar.c**
```c
#include <unistd.h>

void ft_putchar(char c)
{
    write(1, &c, 1);
}
```

**rush00.c**
```c
void ft_putchar(char c);

void print_line(int width, char first, char middle, char last)
{
    int i;

    ft_putchar(first);
    i = 1;
    while (i < width - 1)
    {
        ft_putchar(middle);
        i++;
    }
    if (width > 1)
        ft_putchar(last);
    ft_putchar('\n');
}

void rush(int x, int y)
{
    int i;

    if (x <= 0 || y <= 0)
        return;
    
    print_line(x, 'o', '-', 'o');
    i = 1;
    while (i < y - 1)
    {
        print_line(x, '|', ' ', '|');
        i++;
    }
    if (y > 1)
        print_line(x, 'o', '-', 'o');
}
```

Make sure to save each file with its respective name (`main.c`, `ft_putchar.c`, `rush00.c`) in the `ex00/` directory.

To compile and run the code, you can use the following command:

```
gcc -Wall -Wextra -Werror main.c ft_putchar.c rush00.c && ./a.out
```

The output should match the examples provided in the exercise.
Certainly! Let's go through each file and its purpose step by step.

**main.c:**
The `main.c` file contains the `main` function, which serves as the entry point of the program. In this case, it simply calls the `rush` function with arguments `5` and `5`. You can modify these arguments to test different rectangle dimensions.

**ft_putchar.c:**
The `ft_putchar.c` file includes the definition of the `ft_putchar` function. This function is responsible for outputting a single character to the standard output. In this implementation, it uses the `write` system call from the `<unistd.h>` library to achieve this. The `write` function takes three arguments: the file descriptor (in this case, `1` for standard output), a pointer to the character to be written, and the number of bytes to write (which is `1` in this case, as we're writing a single character).

**rush00.c:**
The `rush00.c` file contains the implementation of the `rush` function, which is responsible for generating the rectangle pattern based on the provided width and height.

- `void print_line(int width, char first, char middle, char last)`: This helper function is defined to print a single line of the rectangle. It takes four arguments: `width` (the width of the line), `first` (the character representing the first position), `middle` (the character representing the middle positions), and `last` (the character representing the last position). The function iterates `width` - 1 times, printing the `middle` character, and then prints the `last` character if `width` is greater than 1. Finally, it prints a newline character to move to the next line.

- `void rush(int x, int y)`: This is the main function that generates the rectangle. It takes two arguments: `x` (the width) and `y` (the height). Inside the function, it first checks if either `x` or `y` is less than or equal to 0. If either dimension is invalid, the function simply returns without doing anything.

  Next, it calls `print_line` to print the top line of the rectangle, with `'o'` as the `first` character, `'-'` as the `middle` character, and `'o'` as the `last` character.

  Then, it enters a loop that iterates `y - 2` times (excluding the first and last lines). In each iteration, it calls `print_line` to print a line with `'|'` as the `first` character, `' '` as the `middle` character, and `'|'` as the `last` character.

  Finally, if the height `y` is greater than 1, it calls `print_line` to print the bottom line of the rectangle, using the same characters as the top line.

That's a detailed explanation of each file and its contents. Remember to save each file with its respective name in the `ex00/` directory and use the provided compilation command to compile and run the program.
